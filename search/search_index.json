{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Docuty is a web based platform for documenting an IT environment, or actually anything else for that matter. It's build with customization in mind which make it easy to keep track of what you think is most important in your enviroment. Feel free to browse the doumentation, interact with our developers, contact our support team or visit our home page to learn more. Source code, bug tracking and requests http://gitlab.lufinity.se Support ticketing system http://support.lufinity.se Docuty home page http://www.docuty.se","title":"Overview"},{"location":"#overview","text":"Docuty is a web based platform for documenting an IT environment, or actually anything else for that matter. It's build with customization in mind which make it easy to keep track of what you think is most important in your enviroment. Feel free to browse the doumentation, interact with our developers, contact our support team or visit our home page to learn more.","title":"Overview"},{"location":"#source-code-bug-tracking-and-requests","text":"http://gitlab.lufinity.se","title":"Source code, bug tracking and requests"},{"location":"#support-ticketing-system","text":"http://support.lufinity.se","title":"Support ticketing system"},{"location":"#docuty-home-page","text":"http://www.docuty.se","title":"Docuty home page"},{"location":"api/attributes/","text":"Attributes Attributes can be reach through the URL https://your-site-url/api/attributes . Retrieve all Attributes URL: https://your-site-url/api/attributes Method: GET Response data: { \"data\": [ { \"id\": 1, \"type\": \"varchar\", \"name\": \"name\", \"label\": \"Name\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null }, { \"id\": 2, \"type\": \"text\", \"name\": \"description\", \"label\": \"Description\", \"description\": null, \"visible_in_listing\": 0, \"visible_in_form\": 1, \"required\": 0, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null }, ..... ] } Retrieve an Attribute URL: https://your-site-url/api/attributes/{attributeid} Method: GET Response data: { \"data\": { \"id\": null, \"type\": null, \"name\": null, \"label\": null, \"description\": null, \"visible_in_listing\": null, \"visible_in_form\": null, \"required\": null, \"encrypted\": null, \"hidden\": null, \"input_mask\": null } } Create an Attribute URL: https://your-site-url/api/attributes Method: POST Request body: { \"type\": \"varchar\", \"name\": \"new_attribute\", \"label\": \"New attribute\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null } Response body: see \"Retrieve an Attribute\" Update an Attribute URL: https://your-site-url/api/attributes/{attributeid} Method: PUT Request body: { \"type\": \"varchar\", \"name\": \"new_attribute\", \"label\": \"New attribute\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null } Response data: see \"Retrieve an Attribute\" Delete an Attribute Not yet implemented.","title":"Attributes"},{"location":"api/attributes/#attributes","text":"Attributes can be reach through the URL https://your-site-url/api/attributes .","title":"Attributes"},{"location":"api/attributes/#retrieve-all-attributes","text":"URL: https://your-site-url/api/attributes Method: GET Response data: { \"data\": [ { \"id\": 1, \"type\": \"varchar\", \"name\": \"name\", \"label\": \"Name\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null }, { \"id\": 2, \"type\": \"text\", \"name\": \"description\", \"label\": \"Description\", \"description\": null, \"visible_in_listing\": 0, \"visible_in_form\": 1, \"required\": 0, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null }, ..... ] }","title":"Retrieve all Attributes"},{"location":"api/attributes/#retrieve-an-attribute","text":"URL: https://your-site-url/api/attributes/{attributeid} Method: GET Response data: { \"data\": { \"id\": null, \"type\": null, \"name\": null, \"label\": null, \"description\": null, \"visible_in_listing\": null, \"visible_in_form\": null, \"required\": null, \"encrypted\": null, \"hidden\": null, \"input_mask\": null } }","title":"Retrieve an Attribute"},{"location":"api/attributes/#create-an-attribute","text":"URL: https://your-site-url/api/attributes Method: POST Request body: { \"type\": \"varchar\", \"name\": \"new_attribute\", \"label\": \"New attribute\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null } Response body: see \"Retrieve an Attribute\"","title":"Create an Attribute"},{"location":"api/attributes/#update-an-attribute","text":"URL: https://your-site-url/api/attributes/{attributeid} Method: PUT Request body: { \"type\": \"varchar\", \"name\": \"new_attribute\", \"label\": \"New attribute\", \"description\": null, \"visible_in_listing\": 1, \"visible_in_form\": 0, \"required\": 1, \"encrypted\": 0, \"hidden\": 0, \"input_mask\": null } Response data: see \"Retrieve an Attribute\"","title":"Update an Attribute"},{"location":"api/attributes/#delete-an-attribute","text":"Not yet implemented.","title":"Delete an Attribute"},{"location":"api/categories/","text":"Categories Categories can be reach through the URL https://your-site-url/api/categories . Retrieve all Categories URL: https://your-site-url/api/categories Method: GET Response data: { \"data\": [ { \"id\": 1, \"name\": \"server\", \"label\": \"Server\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-search\", \"sort_order\": 10, \"created_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } }, ..... ] } Retrieve a Category URL: https://your-site-url/api/categories/{categoryid} Method: GET Response data: { \"data\": { \"id\": 1, \"name\": \"server\", \"label\": \"Server\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-search\", \"sort_order\": 10, \"created_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } } } Create a Category URL: https://your-site-url/api/categories Method: POST Request body: { \"name\": \"router\", \"label\": \"Router\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-user\", \"sort_order\": 10 } Response body: see \"Retrieve a Category\" Update a Category URL: https://your-site-url/api/categories/{categoryid} Method: PUT Request body: { \"name\": \"router\", \"label\": \"Router\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-user\", \"sort_order\": 10 } Response data: see \"Retrieve a Category\" Delete a Category Not yet implemented.","title":"Categories"},{"location":"api/categories/#categories","text":"Categories can be reach through the URL https://your-site-url/api/categories .","title":"Categories"},{"location":"api/categories/#retrieve-all-categories","text":"URL: https://your-site-url/api/categories Method: GET Response data: { \"data\": [ { \"id\": 1, \"name\": \"server\", \"label\": \"Server\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-search\", \"sort_order\": 10, \"created_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } }, ..... ] }","title":"Retrieve all Categories"},{"location":"api/categories/#retrieve-a-category","text":"URL: https://your-site-url/api/categories/{categoryid} Method: GET Response data: { \"data\": { \"id\": 1, \"name\": \"server\", \"label\": \"Server\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-search\", \"sort_order\": 10, \"created_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:28:41.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } } }","title":"Retrieve a Category"},{"location":"api/categories/#create-a-category","text":"URL: https://your-site-url/api/categories Method: POST Request body: { \"name\": \"router\", \"label\": \"Router\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-user\", \"sort_order\": 10 } Response body: see \"Retrieve a Category\"","title":"Create a Category"},{"location":"api/categories/#update-a-category","text":"URL: https://your-site-url/api/categories/{categoryid} Method: PUT Request body: { \"name\": \"router\", \"label\": \"Router\", \"visible_in_navigation\": 1, \"parent_category\": 0, \"attributes\": [ \"1\", \"2\", \"4\" ], \"icon\": \"fa fa-user\", \"sort_order\": 10 } Response data: see \"Retrieve a Category\"","title":"Update a Category"},{"location":"api/categories/#delete-a-category","text":"Not yet implemented.","title":"Delete a Category"},{"location":"api/companies/","text":"Companies Companies is one of the most straight forward models to work with. They can be reach through the URL https://your-site-url/api/companies . Retrieve all Companies URL: https://your-site-url/api/companies Method: GET Response data: { \"data\": [ { \"id\": {id}, \"name\": {name}, \"active\": {active}, \"regnr\": {regnr}, \"street\": {street}, \"zipcode\": {zipcode}, \"city\": {city}, \"phone\": {phone}, \"email\": {email}, \"webpage\": {webpage}, \"country\": {country}, \"created_at\": dateTime, \"updated_at\": dateTime }, ..... ] } Retrieve an Item URL: https://your-site-url/api/companies/{companyid} Method: GET Response data: { \"data\": { \"id\": {id}, \"name\": {name}, \"active\": {active}, \"regnr\": {regnr}, \"street\": {street}, \"zipcode\": {zipcode}, \"city\": {city}, \"phone\": {phone}, \"email\": {email}, \"webpage\": {webpage}, \"country\": {country}, \"created_at\": dateTime, \"updated_at\": dateTime } } Create a Company URL: https://your-site-url/api/companies Method: POST Request body: { \"name\": \"name\", \"active\": 0/1, \"regnr\": \"12345678\", \"streep\": \"Some street\", \"city\": \"some city\", \"phone\": \"07123456789\", \"email\": \"exmple@domain.se\", \"webpage\": \"https://example.se\", \"country\": \"Sweden\" } Response body: see \"Retrieve all Companies\" Update a Company URL: https://your-site-url/api/companies/{companyid} Method: PUT Request body: { \"name\": \"name\", \"active\": 0/1, \"regnr\": \"12345678\", \"streep\": \"Some street\", \"city\": \"some city\", \"phone\": \"07123456789\", \"email\": \"exmple@domain.se\", \"webpage\": \"https://example.se\", \"country\": \"Sweden\" } Response data: see \"Retrieve all Companies\" Delete a Company Not yet implemented.","title":"Companies"},{"location":"api/companies/#companies","text":"Companies is one of the most straight forward models to work with. They can be reach through the URL https://your-site-url/api/companies .","title":"Companies"},{"location":"api/companies/#retrieve-all-companies","text":"URL: https://your-site-url/api/companies Method: GET Response data: { \"data\": [ { \"id\": {id}, \"name\": {name}, \"active\": {active}, \"regnr\": {regnr}, \"street\": {street}, \"zipcode\": {zipcode}, \"city\": {city}, \"phone\": {phone}, \"email\": {email}, \"webpage\": {webpage}, \"country\": {country}, \"created_at\": dateTime, \"updated_at\": dateTime }, ..... ] }","title":"Retrieve all Companies"},{"location":"api/companies/#retrieve-an-item","text":"URL: https://your-site-url/api/companies/{companyid} Method: GET Response data: { \"data\": { \"id\": {id}, \"name\": {name}, \"active\": {active}, \"regnr\": {regnr}, \"street\": {street}, \"zipcode\": {zipcode}, \"city\": {city}, \"phone\": {phone}, \"email\": {email}, \"webpage\": {webpage}, \"country\": {country}, \"created_at\": dateTime, \"updated_at\": dateTime } }","title":"Retrieve an Item"},{"location":"api/companies/#create-a-company","text":"URL: https://your-site-url/api/companies Method: POST Request body: { \"name\": \"name\", \"active\": 0/1, \"regnr\": \"12345678\", \"streep\": \"Some street\", \"city\": \"some city\", \"phone\": \"07123456789\", \"email\": \"exmple@domain.se\", \"webpage\": \"https://example.se\", \"country\": \"Sweden\" } Response body: see \"Retrieve all Companies\"","title":"Create a Company"},{"location":"api/companies/#update-a-company","text":"URL: https://your-site-url/api/companies/{companyid} Method: PUT Request body: { \"name\": \"name\", \"active\": 0/1, \"regnr\": \"12345678\", \"streep\": \"Some street\", \"city\": \"some city\", \"phone\": \"07123456789\", \"email\": \"exmple@domain.se\", \"webpage\": \"https://example.se\", \"country\": \"Sweden\" } Response data: see \"Retrieve all Companies\"","title":"Update a Company"},{"location":"api/companies/#delete-a-company","text":"Not yet implemented.","title":"Delete a Company"},{"location":"api/entities/","text":"Entities Category entities can be reach through the URL https://your-site-url/api/category-entities . Retrieve all Entities URL: https://your-site-url/api/category-entities Method: GET Response data: { \"data\": { \"id\": 1, \"category_id\": 1, \"company_id\": 1, \"attributes\": [ { \"id\": 1, \"attribute_id\": 1, \"entity_id\": 1, \"value\": \"attribute value\" }, { \"id\": 2, \"attribute_id\": 4, \"entity_id\": 1, \"value\": \"attribute value\" } ], \"created_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } }, ..... ] } Retrieve an Entity URL: https://your-site-url/api/category-entities/{entityid} Method: GET Response data: { \"data\": { \"id\": 1, \"category_id\": 1, \"company_id\": 1, \"attributes\": [ { \"id\": 1, \"attribute_id\": 1, \"entity_id\": 1, \"value\": \"attribute value\" }, { \"id\": 2, \"attribute_id\": 4, \"entity_id\": 1, \"value\": \"attribute value\" } ], \"created_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } } } Create an Entity/Entities URL: https://your-site-url/api/category-entities Method: POST Request body: [ { \"category_id\": 3, \"company_id\": 3, \"attributes\": [ { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" }, { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" } ] } ] Note that you post an array so it is possible to create multiple entities at once. If one creation fails, all will fail so if you get an error you need make the full request again to create all entities. {info.fa-info-circle} You can specify the attribute id or the name of the attribute. Text field attributes only accept a string and no HTML. The value will go though an htmlspecialchars_decode. Response body: see \"Retrieve an Entity\" Update or create an Entity/Entities URL: https://you-site-url/api/category-entities/{entityid} Method: PUT Request body: [ { \"id\": 1 \"category_id\": 3, \"company_id\": 3, \"attributes\": [ { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" }, { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" } ] } ] If \"id\" is omitted a new entity will be created. Note that you post an array so it is possible to create multiple entities at once. If one creation fails, all will fail so if you get an error you need make the full request again to create all entities. {info.fa-info-circle} You can specify the attribute id or the name of the attribute. Text field attributes only accept a string and no HTML. The value will go though an htmlspecialchars_decode. Response data: see \"Retrieve an Entity\" Delete an Entity Not yet implemented.","title":"Entities"},{"location":"api/entities/#entities","text":"Category entities can be reach through the URL https://your-site-url/api/category-entities .","title":"Entities"},{"location":"api/entities/#retrieve-all-entities","text":"URL: https://your-site-url/api/category-entities Method: GET Response data: { \"data\": { \"id\": 1, \"category_id\": 1, \"company_id\": 1, \"attributes\": [ { \"id\": 1, \"attribute_id\": 1, \"entity_id\": 1, \"value\": \"attribute value\" }, { \"id\": 2, \"attribute_id\": 4, \"entity_id\": 1, \"value\": \"attribute value\" } ], \"created_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } }, ..... ] }","title":"Retrieve all Entities"},{"location":"api/entities/#retrieve-an-entity","text":"URL: https://your-site-url/api/category-entities/{entityid} Method: GET Response data: { \"data\": { \"id\": 1, \"category_id\": 1, \"company_id\": 1, \"attributes\": [ { \"id\": 1, \"attribute_id\": 1, \"entity_id\": 1, \"value\": \"attribute value\" }, { \"id\": 2, \"attribute_id\": 4, \"entity_id\": 1, \"value\": \"attribute value\" } ], \"created_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" }, \"updated_at\": { \"date\": \"2018-11-25 17:59:49.000000\", \"timezone_type\": 3, \"timezone\": \"UTC\" } } }","title":"Retrieve an Entity"},{"location":"api/entities/#create-an-entityentities","text":"URL: https://your-site-url/api/category-entities Method: POST Request body: [ { \"category_id\": 3, \"company_id\": 3, \"attributes\": [ { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" }, { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" } ] } ] Note that you post an array so it is possible to create multiple entities at once. If one creation fails, all will fail so if you get an error you need make the full request again to create all entities. {info.fa-info-circle} You can specify the attribute id or the name of the attribute. Text field attributes only accept a string and no HTML. The value will go though an htmlspecialchars_decode. Response body: see \"Retrieve an Entity\"","title":"Create an Entity/Entities"},{"location":"api/entities/#update-or-create-an-entityentities","text":"URL: https://you-site-url/api/category-entities/{entityid} Method: PUT Request body: [ { \"id\": 1 \"category_id\": 3, \"company_id\": 3, \"attributes\": [ { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" }, { \"attribute\": 1/\"atttribute name\", \"value\": \"attribute value\" } ] } ] If \"id\" is omitted a new entity will be created. Note that you post an array so it is possible to create multiple entities at once. If one creation fails, all will fail so if you get an error you need make the full request again to create all entities. {info.fa-info-circle} You can specify the attribute id or the name of the attribute. Text field attributes only accept a string and no HTML. The value will go though an htmlspecialchars_decode. Response data: see \"Retrieve an Entity\"","title":"Update or create an Entity/Entities"},{"location":"api/entities/#delete-an-entity","text":"Not yet implemented.","title":"Delete an Entity"},{"location":"api/general/","text":"General To date the only possible API functions is to view, create, edit and delete companies, attributes, categories and entities. More functions will be added in future releases. All requests must include an access token in the header which is received by Code Null like so: Headers: Authorization = Bearer [Access token] All data in request body as well as response must be in JSON-format. Also, there are no restriction in the API. So the API-user can't have restricted permissions for certain companies, categories or attributes. This is to be implemented in later versions.","title":"General"},{"location":"api/general/#general","text":"To date the only possible API functions is to view, create, edit and delete companies, attributes, categories and entities. More functions will be added in future releases. All requests must include an access token in the header which is received by Code Null like so: Headers: Authorization = Bearer [Access token] All data in request body as well as response must be in JSON-format. Also, there are no restriction in the API. So the API-user can't have restricted permissions for certain companies, categories or attributes. This is to be implemented in later versions.","title":"General"},{"location":"getting-started/create-attributes/","text":"Create Attributes What is an Attribute? Attributes are the building blocks of Docuty. The attributes describes what you can document and helps the end user understand how to use the program. Docuty is build to be fully modular and if you feel like there are attributes that you want and is not included by default, you can just create a new one of your liking. Creating an Attribute Creating an attribute is an easy thing to do and most is self explanatory, but in case you need some pointer you can continue reading. Start by clicking on \"Settings\" and then \"Attributes\" in Docuty. You should see a table of all available attributes and remember to always look through it before creating a new one to make sure that there isn't an existing attribute you can use for your case. When certain that you need to create a new on, click \"New\". A pop-up will appear with a couple of fields explained here below. - Name - This is what Docuty uses as an identifier in the background. This need to be unique for all attributes and needs to be in lower case. Alphanumeric characters, underlines (_) and dashes (-) are the only characters permitted. Label - This is what you will see in Docuty. This is how the end users identifies the attribute. Description (Optional) - Here you can write a short description about the attribute that will help others understand what it's for. Visible in lists - Defines if the attribute should have a column in the table listing on each categories first page. Visible in detailed view - Defines if the attribute should be shown on a specific items page. Required - If the attribute is required to be filled on each item. If you change an attribute after an item is created, the field will be required on next update. Store encrypted - Define if you want the value of the attribute to be encrypted. This is convenient when storing sensitive data like passwords. Hide input - This can be used if you want the attribute to be hidden in both tables and on specific items view page. Instead a \"Copy\" button will be shown in tables (which will just copy the value) and \"Show content\" button on the view page. This is used when you know that the data might be sensitive and don't want anybody looking over your shoulder to see the value. Type - Here we specify what kind of attribute this is. This is one of the most important settings in the attribute. Each type has its specific input kind and its own table in the database. Text (wysiwyg) - This is used for larger amount of text like word documents, code, or alike. The input for this will be a WYSIWYG (What You See Is What You Get) editor. Simple text - This is used for larger amount of text like where no format is needed. The input for this will be a plain text editor. String - This is the most common type. It's just a simple string with an normal input field. Used for things like name, password, username, telephone number, etc. Integer - Numbers, simply put. It's like string but the input field is constrained to just numbers. On/Off - Just a simple on/off or true/false attribute. The input field is a check box and can be used for values like alive/dead, enabled/disabled, virtual/physical, etc. Drop down - This is a multi options attribute where you specify the values that can be chosen. You can also specify if the user can select only one or multiple values. Image - This is used to upload an image to an entity. Date - A simple date picker. Can be used to for instance document an installation date, an end of warranty date, etc. Date range - Like the date field, but for a date range. Can be used to for instance document both a start and an end date for a support contract, or alike.","title":"Create Attributes"},{"location":"getting-started/create-attributes/#create-attributes","text":"","title":"Create Attributes"},{"location":"getting-started/create-attributes/#what-is-an-attribute","text":"Attributes are the building blocks of Docuty. The attributes describes what you can document and helps the end user understand how to use the program. Docuty is build to be fully modular and if you feel like there are attributes that you want and is not included by default, you can just create a new one of your liking.","title":"What is an Attribute?"},{"location":"getting-started/create-attributes/#creating-an-attribute","text":"Creating an attribute is an easy thing to do and most is self explanatory, but in case you need some pointer you can continue reading. Start by clicking on \"Settings\" and then \"Attributes\" in Docuty. You should see a table of all available attributes and remember to always look through it before creating a new one to make sure that there isn't an existing attribute you can use for your case. When certain that you need to create a new on, click \"New\". A pop-up will appear with a couple of fields explained here below. - Name - This is what Docuty uses as an identifier in the background. This need to be unique for all attributes and needs to be in lower case. Alphanumeric characters, underlines (_) and dashes (-) are the only characters permitted. Label - This is what you will see in Docuty. This is how the end users identifies the attribute. Description (Optional) - Here you can write a short description about the attribute that will help others understand what it's for. Visible in lists - Defines if the attribute should have a column in the table listing on each categories first page. Visible in detailed view - Defines if the attribute should be shown on a specific items page. Required - If the attribute is required to be filled on each item. If you change an attribute after an item is created, the field will be required on next update. Store encrypted - Define if you want the value of the attribute to be encrypted. This is convenient when storing sensitive data like passwords. Hide input - This can be used if you want the attribute to be hidden in both tables and on specific items view page. Instead a \"Copy\" button will be shown in tables (which will just copy the value) and \"Show content\" button on the view page. This is used when you know that the data might be sensitive and don't want anybody looking over your shoulder to see the value. Type - Here we specify what kind of attribute this is. This is one of the most important settings in the attribute. Each type has its specific input kind and its own table in the database. Text (wysiwyg) - This is used for larger amount of text like word documents, code, or alike. The input for this will be a WYSIWYG (What You See Is What You Get) editor. Simple text - This is used for larger amount of text like where no format is needed. The input for this will be a plain text editor. String - This is the most common type. It's just a simple string with an normal input field. Used for things like name, password, username, telephone number, etc. Integer - Numbers, simply put. It's like string but the input field is constrained to just numbers. On/Off - Just a simple on/off or true/false attribute. The input field is a check box and can be used for values like alive/dead, enabled/disabled, virtual/physical, etc. Drop down - This is a multi options attribute where you specify the values that can be chosen. You can also specify if the user can select only one or multiple values. Image - This is used to upload an image to an entity. Date - A simple date picker. Can be used to for instance document an installation date, an end of warranty date, etc. Date range - Like the date field, but for a date range. Can be used to for instance document both a start and an end date for a support contract, or alike.","title":"Creating an Attribute"},{"location":"getting-started/create-categories/","text":"Create Categories What is a Category? Categories can be anything you like it to be. It is what you want documented in Docuty and is a kind of a blueprint filled with attributes. You can for example create a category named \"Servers\" and document all your customers servers to help you or your colleagues out when working with their environment. Or maybe you want to keep track of all your best friends so you create a category named \"Pet Animals\" and then create some sub categories like \"Dogs\", \"Cats\", or \"Turtles\". The choice is yours! Creating a Category Before creating a category, you need to figure out what kind of attributes you will be needing and make sure they exist in the attribute table. To learn more about attributes, go to Attributes. When you're sure that all attributes you need exist click on \"Settings\" and then \"Categories\" which will lead you to the Category table. Here you can see all existing categories as well as create a new. To do so, click on \"New\". A pop-up will appear with a couple of fields. Here are a short description on what they are. Name - This is what Docuty uses as an identifier in the background. This need to be unique for all categories and needs to be in lower case. Alphanumeric characters, underlines (_) and dashes (-) are the only characters permitted. Label - This is what you will see in Docuty, what will be shown in the navigation (if you choose to display it there) and on other places. This is how the end users identifies the category. Icon - As you might have guessed, this specifies what icon that will be associated with the category. If you can't find any suiting icons or want to know what icons are available, please go to Icons. Show in navigation bar - This specifies if the category will be shown in your left navigation. If the category is a sub category, you might don't want it to be shown. {danger.fa-exclamation-circle} If you hide it and it's not a sub category, the only way to access it is to know the URL to the table page. Has a parent category - Explained above. If the category should inherit from another category. I.e \"Cats\" and \"Dogs\" are sub categories of \"Pet animals\". Attributes - The blueprint! This is what decides what will be possible to document in the category. \"Pet Animals\" might have attributes like \"Name\", \"Age\" and \"Birthday\". There is no limit on how many attributes you can use but you can only use one of each.","title":"Create Categories"},{"location":"getting-started/create-categories/#create-categories","text":"","title":"Create Categories"},{"location":"getting-started/create-categories/#what-is-a-category","text":"Categories can be anything you like it to be. It is what you want documented in Docuty and is a kind of a blueprint filled with attributes. You can for example create a category named \"Servers\" and document all your customers servers to help you or your colleagues out when working with their environment. Or maybe you want to keep track of all your best friends so you create a category named \"Pet Animals\" and then create some sub categories like \"Dogs\", \"Cats\", or \"Turtles\". The choice is yours!","title":"What is a Category?"},{"location":"getting-started/create-categories/#creating-a-category","text":"Before creating a category, you need to figure out what kind of attributes you will be needing and make sure they exist in the attribute table. To learn more about attributes, go to Attributes. When you're sure that all attributes you need exist click on \"Settings\" and then \"Categories\" which will lead you to the Category table. Here you can see all existing categories as well as create a new. To do so, click on \"New\". A pop-up will appear with a couple of fields. Here are a short description on what they are. Name - This is what Docuty uses as an identifier in the background. This need to be unique for all categories and needs to be in lower case. Alphanumeric characters, underlines (_) and dashes (-) are the only characters permitted. Label - This is what you will see in Docuty, what will be shown in the navigation (if you choose to display it there) and on other places. This is how the end users identifies the category. Icon - As you might have guessed, this specifies what icon that will be associated with the category. If you can't find any suiting icons or want to know what icons are available, please go to Icons. Show in navigation bar - This specifies if the category will be shown in your left navigation. If the category is a sub category, you might don't want it to be shown. {danger.fa-exclamation-circle} If you hide it and it's not a sub category, the only way to access it is to know the URL to the table page. Has a parent category - Explained above. If the category should inherit from another category. I.e \"Cats\" and \"Dogs\" are sub categories of \"Pet animals\". Attributes - The blueprint! This is what decides what will be possible to document in the category. \"Pet Animals\" might have attributes like \"Name\", \"Age\" and \"Birthday\". There is no limit on how many attributes you can use but you can only use one of each.","title":"Creating a Category"},{"location":"getting-started/installation/","text":"Installation Cloud Edition After you have received your own docuty.se site you will be greeted with an installation page where you can specify what file system you are using if you would like to connect it to Docuty. You will also be asked to create an admin account. Note that this is an account that is only used for initial setup and you need to create personal accounts for every user. The admin account is not counted amongst your total amount of users. Self-hosted Coming soon...","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#cloud-edition","text":"After you have received your own docuty.se site you will be greeted with an installation page where you can specify what file system you are using if you would like to connect it to Docuty. You will also be asked to create an admin account. Note that this is an account that is only used for initial setup and you need to create personal accounts for every user. The admin account is not counted amongst your total amount of users.","title":"Cloud Edition"},{"location":"getting-started/installation/#self-hosted","text":"Coming soon...","title":"Self-hosted"},{"location":"misc/changelog/","text":"Changelog 1.0 (TBA) Initial release","title":"Changelog"},{"location":"misc/changelog/#changelog","text":"","title":"Changelog"},{"location":"misc/changelog/#10-tba","text":"Initial release","title":"1.0 (TBA)"},{"location":"misc/icons/","text":"Icons There are multiple icons available when creating a category and finding one might be a tiresome work when you have to go through all icons in the select container. To make it easier, you can look in the following link on which icons that is available: https://adminlte.io/themes/AdminLTE/pages/UI/icons.html","title":"Icons"},{"location":"misc/icons/#icons","text":"There are multiple icons available when creating a category and finding one might be a tiresome work when you have to go through all icons in the select container. To make it easier, you can look in the following link on which icons that is available: https://adminlte.io/themes/AdminLTE/pages/UI/icons.html","title":"Icons"}]}